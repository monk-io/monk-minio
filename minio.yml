---
namespace: minio

minio-common:
  metadata:
    name: MinIO | High Performance, Kubernetes Native Object Storage
    description: High Performance Object Storage is Open Source, Amazon S3 compatible, Kubernetes Native and is designed for cloud native workloads like AI.
    tags: High Performance Object Storage, Multi-Cloud, Hybrid Cloud, Object Storage, Object Storage for AI, Cloud Storage, S3 Compatible, Golang, AWS S3, Amazon S3, Open Source Cloud Storage, Ceph, OpenStack Swift, Microsoft Azure Blobstore, Google Cloud Storage, Cloud Foundry Blobstore, Cloud Foundry
      Bosh, Artifact Storage, DC/OS, Kubernetes, Docker, Container Storage, Blobstore, NAS, Gluster, GlusterFS, PACS, VNA, Archive, Secondary Storage, Backup Storage, Snapshots Hybrid, OnPrem, Private Cloud
    website: https://min.io/
    publisher: monk.io
    icon: https://min.io/resources/img/logo.svg
    private: true
  # connections:
  #   minio1:
  #     runnable: minio/minio1
  #     service: minio-console-svc
  #   minio2:
  #     runnable: minio/minio2
  #     service: minio-console-svc
  containers:
    minio:
      # ports:
      #   - 9000
      #   - 9001
      image: quay.io/minio/minio:latest
      bash: sleep 15; minio server --console-address ":$MINIO_CONSOLE_PORT" $SERVER_LIST
      # paths:
      #   - <- `${volume_local}/data1:/data1`
      #   - <- `${volume_local}/data2:/data2`

  # volumes:
  #   important-data:
  #       size: 60
  #       kind: SSD
  #       path: <- $volume-data
  variables:
    console_port:
      env: MINIO_CONSOLE_PORT
      type: int
      value: <- $monk_console_port
    volume_local:
      type: string
      value: <- `${monk-volume-path}/monk-minio`
    # minio1_dns:
    #   env: MINIO1_DNS
    #   type: string
    #   value: <- connection-hostname("minio1")
    # minio2_dns:
    #   env: MINIO2_DNS
    #   type: string
    #   value: <- connection-hostname("minio2")
    # minio_servers:
    #   env: SERVER_LIST
    #   type: string
    #   value: <- `http://${minio1_dns}/data1 http://${minio2_dns}/data2`
    minio_admin_password:
      env: MINIO_ROOT_PASSWORD
      value: <- $monk_minio_admin_password
    minio_admin_username:
      env: MINIO_ROOT_USER
      value: <- $monk_minio_admin_username
  services:
    minio-console-svc:
      container: minio
      port: 9001
      protocol: tcp
    minio-svc:
      container: minio
      port: 9000
      protocol: tcp

minio1:
  defines: runnable
  inherits: minio/minio-common
  variables:
    volume_local:
      type: string
      value: <- `${monk-volume-path}/monk-minio1`
    minio2_dns:
      env: MINIO2_DNS
      type: string
      value: <- connection-hostname("minio2")
    minio_servers:
      env: SERVER_LIST
      type: string
      value: <- `http://${minio1_dns}/data1 http://${minio2_dns}/data2`

minio2:
  defines: runnable
  inherits: minio/minio-common
  variables:
    volume_local:
      type: string
      value: <- `${monk-volume-path}/monk-minio2`

nginx:
  defines: runnable
  connections:
    minio1-console:
      runnable: minio/minio1
      service: minio-console-svc
    minio2-console:
      runnable: minio/minio2
      service: minio-console-svc
    minio1:
      runnable: minio/minio1
      service: minio-svc
    minio2:
      runnable: minio/minio2
      service: minio-svc
  files:
    server-def:
      contents: |
        upstream minio {
            server {{ v "minio2_dns" }}:9000;
            server {{ v "minio1_dns" }}:9000;
        }
        upstream console {
            ip_hash;
            server {{ v "minio2_dns" }}:9001;
            server {{ v "minio1_dns" }}:9001;
        }
        server {
          listen 0.0.0.0:{{ v "monk_minio_port" }};
          server_name {{ v "server_name" }};
          ignore_invalid_headers off;
          client_max_body_size 0;
          proxy_buffering off;
          proxy_request_buffering off;
          location / {
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_connect_timeout 300;
              # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
              proxy_http_version 1.1;
              proxy_set_header Connection "";
              chunked_transfer_encoding off;
              proxy_pass http://minio;
          }
        }
        server {
            listen 0.0.0.0:{{ v "monk_console_port" }};
            server_name {{ v "server_name" }};
            ignore_invalid_headers off;
            client_max_body_size 0;
            proxy_buffering off;
            proxy_request_buffering off;
            location / {
                proxy_set_header Host $http_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-NginX-Proxy true;
                real_ip_header X-Real-IP;
                proxy_connect_timeout 300;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                chunked_transfer_encoding off;
                proxy_pass http://console;
            }
        }
      mode: 0644
      container: minio-reverse-proxy
      path: /opt/bitnami/nginx/conf/server_blocks/reverse_proxy.conf
  containers:
    minio-reverse-proxy:
      image-tag: latest
      image: bitnami/nginx
      ports:
        - 9000
        - 9001
  variables:
    minio2_dns:
      type: string
      value: <- connection-hostname("minio2") split(".dns.podman") join("")
    minio1_dns:
      type: string
      value: <- connection-hostname("minio1") split(".dns.podman") join("")
    proxy-target-port:
      type: string
      value: 80
  depends:
    wait-for:
      runnables:
        - minio/minio1
        - minio/minio2
      timeout: 120
